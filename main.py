import sys
import json
from constants import DEFAULT_PATH_FOR_JSON_FILE
from auto_generated_playlist import AutoGeneratedPlaylistManager
import traktor
import m3u_playlist_reader
import beets_manager
import import_utils
import scanner
import time
import data
from pathlib import Path


if __name__ == "__main__":

    start_time = time.time()

    if len(sys.argv) < 2:
        config_path = DEFAULT_PATH_FOR_JSON_FILE
    else:
        config_path = sys.argv[1]

    with open(config_path) as json_file:
        config = json.load(json_file)

    volume = config.get("volume")
    tags_configuration_json_file = config.get("tagsConfiguration")
    with open(tags_configuration_json_file) as json_file:
        tags_configuration_dict = json.load(json_file)
        tags_configuration = data.TagsConfiguration.from_dict(tags_configuration_dict)

    traktor_collection = config.get("traktor")
    beets_db = config.get("beetsLibrary")
    playlist_manager = AutoGeneratedPlaylistManager(
        tags_configuration.tag_models,
        tags_configuration.playlists_to_generate)

    # Smart playlist plugin
    beet_smart_playlist_path = config.get("m3uPath")
    beet_smart_playlist_directory_name = config.get("m3uDirectoryName")

    # Custom auto-generated playlists
    auto_generated_playlists_directory_name = config.get("generatedPlaylistsDirectoryName")

    print(json.dumps(config, indent=4))

    m3u_playlists = m3u_playlist_reader.list_playlists_at_path(beet_smart_playlist_path)
    print("Found %s m3u playlists in %s" %
          (len(m3u_playlists), beet_smart_playlist_path))

    print("Writing m3u playlists to Traktor %s playlist folder" % beet_smart_playlist_directory_name)
    traktor.write_playlists_to_traktor(
        traktor_collection,
        m3u_playlists,
        volume,
        beet_smart_playlist_directory_name
    )

    traktor_tracks = traktor.get_tracks(
        traktor_collection,
        volume,
        auto_generated_playlists_directory_name,
        playlist_manager)
    print("Found %s ratings in traktor" % len([t for t in traktor_tracks.values() if t.rating is not None]))
    print("Found %s tagged tracks in traktor" % len([t for t in traktor_tracks.values() if t.tags]))

    beets_tracks = beets_manager.get_tracks(beets_db, scanner.TAGS_MODEL.keys())
    print("Found %s ratings in beets" % len([t for t in beets_tracks.values() if t.rating is not None]))

    print("=== Exporting ratings and tags to beets ===")
    beets_manager.write_tracks_rating_and_tags(beets_db, traktor_tracks)

    print("=== Exporting ratings to Traktor ===")

    not_in_traktor = list()
    for p in beets_tracks:
        if beets_tracks.get(p).rating is not None and \
                (p not in traktor_tracks or traktor_tracks.get(p).rating is None):
            not_in_traktor.append(beets_tracks.get(p))
    not_in_beets = list()
    for p in traktor_tracks:
        if traktor_tracks.get(p).rating is not None and\
                (p not in beets_tracks or beets_tracks.get(p).rating is None):
            not_in_beets.append(traktor_tracks.get(p))
    print("Ratings not in traktor: total %s, extract: %s" %
          (len(not_in_traktor), [str(t) for t in not_in_traktor[:10]]))
    print("---------------------------")
    print("Ratings not in beets: total %s, extract: %s" %
          (len(not_in_beets), [str(t) for t in not_in_beets[:10]]))

    traktor.write_rating_to_traktor_collection(
        traktor_collection,
        beets_tracks
    )

    print("Writing comments to Traktor tracks...")
    traktor.write_comments_to_traktor_collection(
        traktor_collection,
        beets_tracks,
        scanner.TAGS_MODEL.keys()
    )

    # Auto-generated playlists
    generated_playlists = playlist_manager.playlists_from_tagged_tracks(beets_tracks)
    print("Found %s auto-generated playlists" % len(generated_playlists))
    print("Writing auto-generated playlists to Traktor in folder '%s'" % auto_generated_playlists_directory_name)
    traktor.write_playlists_to_traktor(
        traktor_collection,
        generated_playlists,
        volume,
        auto_generated_playlists_directory_name
    )

    # Utils to import more easily
    print("\n===== Starting running utils for beet import ======")
    symlink_directory = Path(config.get("temporaryFolderForTracksImportedInTraktorButNotInBeets"))
    import_utils.create_links_to_files_imported_in_traktor_but_not_in_beets(
        symlink_directory,
        traktor_tracks,
        beets_tracks
    )
    import_utils.remove_links_when_imported_in_beets_and_update_traktor_paths(
        traktor_collection,
        traktor_tracks,
        beets_tracks
    )


    print("Done !")

    elapsed_time = time.time() - start_time
    print('Execution time : %.3f' % elapsed_time)


